apply plugin: 'osgi'
apply plugin: 'com.zyxist.chainsaw'

description = 'Apache Jena - Core'

ext {
    javaModuleName = 'org.apache.jena.core'
}

javaModule {
    name = javaModuleName
    extraTestModules = ['java.management', 'java.sql']
}

dependencies {
    compile project(':jena.base')
    compile project(':jena.iri')
    compile("com.google.guava:guava:$guavaVersion")
    compile("commons-cli:commons-cli:$commonsCliVersion")
    compile("commons-codec:commons-codec:$commonsCodecVersion")
    compile("org.slf4j:slf4j-api:$slf4jVersion")

    testCompile("org.xenei:junit-contracts:$junitContractsVersion") {
        exclude(module: 'commons-cli')
        exclude(module: 'hamcrest-core')
    }
    testCompile project(path: ':jena.base', configuration: 'testOutput')
    testCompile("org.mockito:mockito-all:$mockitoVersion")
    testCompile("org.awaitility:awaitility:$awaitilityVersion") {
        exclude(module: 'hamcrest-core')
        exclude(module: 'hamcrest-library')
    }
    testImplementation("ch.qos.logback:logback-classic:$logbackVersion")
}

task packageTests(type: Jar) {
    from sourceSets.test.output
    classifier = 'tests'
}

artifacts.archives packageTests

configurations {
    testOutput
}

dependencies {
    testOutput sourceSets.test.output
}

jar {
    manifest {
        description project.description
        docURL project.docURL
        vendor project.vendor
        license project.license

        instruction 'Automatic-Module-Name', javaModuleName
        instruction 'Import-Package', '*'
        instruction 'Export-Package', "$javaModuleName;version=$projectOsgiVersion"
    }
    appendix 'jpms'
}